plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

group = 'com.Teenkung'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    maven {
        name = 'spigotmc-repo'
        url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'
    }
    maven {
        name = 'sonatype'
        url = 'https://oss.sonatype.org/content/groups/public/'
    }
    maven {
        name = 'nbtapi'
        url = 'https://repo.codemc.org/repository/maven-public/'
    }
    maven {
        name = 'placeholderapi'
        url = 'https://repo.extendedclip.com/content/repositories/placeholderapi/'
    }
    maven {
        name = 'vault'
        url = 'https://jitpack.io'
    }
    maven {
        name = 'worldguard'
        url = 'https://maven.enginehub.org/repo/'
    }
    maven {
        name = 'combatlog'
        url = 'https://nexus.sirblobman.xyz/repository/public/'
    }
    maven {
        name = "iridiumdevelopment"
        url = 'https://nexus.iridiumdevelopment.net/repository/maven-releases/'
    }
}

dependencies {
    compileOnly 'org.spigotmc:spigot-api:1.18.1-R0.1-SNAPSHOT'
    compileOnly 'de.tr7zw:item-nbt-api-plugin:2.9.2'
    compileOnly 'me.clip:placeholderapi:2.11.0'
    compileOnly 'com.github.MilkBowl:VaultAPI:1.7'
    compileOnly 'com.sk89q.worldguard:worldguard-bukkit:7.0.4'
    compileOnly 'com.gitlab.ruany:LiteBansAPI:0.3.5'
    compileOnly 'com.github.sirblobman.combatlogx:api:11.0.0.0-SNAPSHOT'
    //compileOnly 'com.github.plan-player-analytics:Plan:5.4.1633'
    //testCompileOnly 'com.github.plan-player-analytics:Plan:5.4.1633'
    implementation 'com.iridium:IridiumColorAPI:1.0.6'
    compileOnly fileTree('libs')
}

shadowJar {
    dependencies {
        include dependency('com.iridium:IridiumColorAPI:1.0.6')
    }
}

def targetJavaVersion = 17
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}
